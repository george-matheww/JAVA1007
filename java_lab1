1.Create a TeeShirt class for Toby’s Tee Shirt Company. Fields include an order
number, size, color, and price. Create set methods for the order number, size,
and color and get methods for all four fields. The price is determined by the
size: $22.99 for XXL or XXXL, and $19.99 for all other sizes. Create a subclass
named CustomTee that descends from TeeShirt and includes a field to hold the
slogan requested for the shirt, and include get and set methods this field. Write
an application that creates two objects of each class, and demonstrate that all the
methods work correctly. Save the files as TeeShirt.java, CustomTee.java, and
DemoTees.java.

2.Create a class named Pizza with data fields for description (such as sausage
and onion) and price. Include a constructor that requires arguments for both
fields and a method to display the data. Create a subclass named DeliveryPizza
that inherits from Pizza but adds a delivery fee and a delivery address. The
description, price, and delivery address are required as arguments to the
constructor. The delivery fee is $3 if the pizza ordered costs more than $15;
otherwise it is $5. Write an application that instantiates at least two objects of
each type, and display the values. Save the files as Pizza.java, DeliveryPizza.java, and DemoPizzas.java.

3.Develop a set of classes for a college to use in various student service and
personnel applications. Classes you need to design include the following:
•• Person—A Person contains a first name, last name, street address, zip code,
and phone number. The class also includes a method that sets each data
field, using a series of dialog boxes and a display method that displays all of a
Person’s information on a single line at the command line on the screen.
•• CollegeEmployee—CollegeEmployee descends from Person. A
CollegeEmployee also includes a Social Security number, an annual salary,
and a department name, as well as methods that override the Person methods
to accept and display all CollegeEmployee data.
•• Faculty—Faculty descends from CollegeEmployee. This class also includes
a Boolean field that indicates whether the Faculty member is tenured, as well
as methods that override the CollegeEmployee methods to accept and display
this additional piece of information.
•• Student—Student descends from Person. In addition to the fields available in
Person, a Student contains a major field of study and a grade point average as
well as methods that override the Person methods to accept and display these
additional facts.
Write an application named CollegeList that declares an array of four “regular”
CollegeEmployees, three Faculty, and seven Students. Prompt the user to
specify which type of person’s data will be entered (C, F, or S), or allow the user to quit (Q). While the user chooses to continue (that is, does not quit), accept data entry for the appropriate type of Person. If the user attempts to enter data for more than four CollegeEmployees, three Faculty, or seven Students, display an error message. When the user quits, display a report on the screen listing each group of Persons under the appropriate heading of “College Employees,” “Faculty,” or “Students.” If the user has not entered data for one or more types of Persons during a session, display an appropriate message under the appropriate heading. Save the files as Person.java, CollegeEmployee.java, Faculty.java, Student.java, and CollegeList.java.